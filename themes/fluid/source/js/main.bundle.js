!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=5)}([function(t,e,i){"use strict";function n(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),i=0;i<e.length;i+=2){const t=Math.PI*i/this.size;e[i]=Math.cos(t),e[i+1]=-Math.sin(t)}this.table=e;for(var n=0,s=1;this.size>s;s<<=1)n++;this._width=n%2==0?n-1:n,this._bitrev=new Array(1<<this._width);for(var o=0;o<this._bitrev.length;o++){this._bitrev[o]=0;for(var r=0;r<this._width;r+=2){var h=this._width-r-2;this._bitrev[o]|=(o>>>r&3)<<h}}this._out=null,this._data=null,this._inv=0}t.exports=n,n.prototype.fromComplexArray=function(t,e){for(var i=e||new Array(t.length>>>1),n=0;n<t.length;n+=2)i[n>>>1]=t[n];return i},n.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},n.prototype.toComplexArray=function(t,e){for(var i=e||this.createComplexArray(),n=0;n<i.length;n+=2)i[n]=t[n>>>1],i[n+1]=0;return i},n.prototype.completeSpectrum=function(t){for(var e=this._csize,i=e>>>1,n=2;n<i;n+=2)t[e-n]=t[n],t[e-n+1]=-t[n+1]},n.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},n.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},n.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var i=0;i<t.length;i++)t[i]/=this.size;this._out=null,this._data=null},n.prototype._transform4=function(){var t,e,i=this._out,n=this._csize,s=1<<this._width,o=n/s<<1,r=this._bitrev;if(4===o)for(t=0,e=0;t<n;t+=o,e++){const i=r[e];this._singleTransform2(t,i,s)}else for(t=0,e=0;t<n;t+=o,e++){const i=r[e];this._singleTransform4(t,i,s)}var h=this._inv?-1:1,a=this.table;for(s>>=2;s>=2;s>>=2){var u=(o=n/s<<1)>>>2;for(t=0;t<n;t+=o)for(var c=t+u,l=t,d=0;l<c;l+=2,d+=s){const t=l,e=t+u,n=e+u,s=n+u,o=i[t],r=i[t+1],c=i[e],f=i[e+1],p=i[n],m=i[n+1],g=i[s],v=i[s+1],x=o,y=r,w=a[d],_=h*a[d+1],b=c*w-f*_,P=c*_+f*w,A=a[2*d],E=h*a[2*d+1],I=p*A-m*E,D=p*E+m*A,T=a[3*d],M=h*a[3*d+1],z=g*T-v*M,C=g*M+v*T,S=x+I,k=y+D,L=x-I,O=y-D,j=b+z,R=P+C,U=h*(b-z),F=h*(P-C),N=S+j,B=k+R,q=S-j,H=k-R,W=L+F,K=O-U,X=L-F,Y=O+U;i[t]=N,i[t+1]=B,i[e]=W,i[e+1]=K,i[n]=q,i[n+1]=H,i[s]=X,i[s+1]=Y}}},n.prototype._singleTransform2=function(t,e,i){const n=this._out,s=this._data,o=s[e],r=s[e+1],h=s[e+i],a=s[e+i+1],u=o+h,c=r+a,l=o-h,d=r-a;n[t]=u,n[t+1]=c,n[t+2]=l,n[t+3]=d},n.prototype._singleTransform4=function(t,e,i){const n=this._out,s=this._data,o=this._inv?-1:1,r=2*i,h=3*i,a=s[e],u=s[e+1],c=s[e+i],l=s[e+i+1],d=s[e+r],f=s[e+r+1],p=s[e+h],m=s[e+h+1],g=a+d,v=u+f,x=a-d,y=u-f,w=c+p,_=l+m,b=o*(c-p),P=o*(l-m),A=g+w,E=v+_,I=x+P,D=y-b,T=g-w,M=v-_,z=x-P,C=y+b;n[t]=A,n[t+1]=E,n[t+2]=I,n[t+3]=D,n[t+4]=T,n[t+5]=M,n[t+6]=z,n[t+7]=C},n.prototype._realTransform4=function(){var t,e,i=this._out,n=this._csize,s=1<<this._width,o=n/s<<1,r=this._bitrev;if(4===o)for(t=0,e=0;t<n;t+=o,e++){const i=r[e];this._singleRealTransform2(t,i>>>1,s>>>1)}else for(t=0,e=0;t<n;t+=o,e++){const i=r[e];this._singleRealTransform4(t,i>>>1,s>>>1)}var h=this._inv?-1:1,a=this.table;for(s>>=2;s>=2;s>>=2){var u=(o=n/s<<1)>>>1,c=u>>>1,l=c>>>1;for(t=0;t<n;t+=o)for(var d=0,f=0;d<=l;d+=2,f+=s){var p=t+d,m=p+c,g=m+c,v=g+c,x=i[p],y=i[p+1],w=i[m],_=i[m+1],b=i[g],P=i[g+1],A=i[v],E=i[v+1],I=x,D=y,T=a[f],M=h*a[f+1],z=w*T-_*M,C=w*M+_*T,S=a[2*f],k=h*a[2*f+1],L=b*S-P*k,O=b*k+P*S,j=a[3*f],R=h*a[3*f+1],U=A*j-E*R,F=A*R+E*j,N=I+L,B=D+O,q=I-L,H=D-O,W=z+U,K=C+F,X=h*(z-U),Y=h*(C-F),G=N+W,J=B+K,$=q+Y,Q=H-X;if(i[p]=G,i[p+1]=J,i[m]=$,i[m+1]=Q,0!==d){if(d!==l){var V=q+-h*Y,Z=-H+-h*X,tt=N+-h*W,et=-B- -h*K,it=t+c-d,nt=t+u-d;i[it]=V,i[it+1]=Z,i[nt]=tt,i[nt+1]=et}}else{var st=N-W,ot=B-K;i[g]=st,i[g+1]=ot}}}},n.prototype._singleRealTransform2=function(t,e,i){const n=this._out,s=this._data,o=s[e],r=s[e+i],h=o+r,a=o-r;n[t]=h,n[t+1]=0,n[t+2]=a,n[t+3]=0},n.prototype._singleRealTransform4=function(t,e,i){const n=this._out,s=this._data,o=this._inv?-1:1,r=2*i,h=3*i,a=s[e],u=s[e+i],c=s[e+r],l=s[e+h],d=a+c,f=a-c,p=u+l,m=o*(u-l),g=d+p,v=f,x=-m,y=d-p,w=f,_=m;n[t]=g,n[t+1]=0,n[t+2]=v,n[t+3]=x,n[t+4]=y,n[t+5]=0,n[t+6]=w,n[t+7]=_}},function(t,e,i){var n=i(2),s=i(3),o=i(4);function r(t){return o.name+": "+t}var h={};s(h)({leftMatrixNotCompatible:r("Cannot multiply matrix at left side"),rightMatrixNotCompatible:r("Cannot multiply matrix at right side")});var a=(t,e,i)=>e+t*i;function u(t){n(t)&&(t={});var e=t.addition,i=t.multiplication;return n(e)&&(e=(t,e)=>t+e),n(i)&&(i=(t,e)=>t*e),function(t){return function(n,s){var o=s.length/t,r=n.length/t,u=Math.floor(o)!==o,c=Math.floor(r)!==r;if(u)throw new TypeError(h.rightMatrixNotCompatible);if(c)throw new TypeError(h.leftMatrixNotCompatible);for(var l=[],d=0;d<r;d++)for(var f=0;f<o;f++){for(var p=a(d,0,t),m=a(0,f,o),g=s[m],v=n[p],x=i(v,g),y=1;y<t;y++)p=a(d,y,t),g=s[m=a(y,f,o)],v=n[p],x=e(x,i(g,v));l.push(x)}return l}}}s(u)({error:h}),t.exports=u},function(t,e){t.exports=function(t){return null==t||"number"==typeof t&&isNaN(t)||t.length<1&&"function"!=typeof t||"object"==typeof t&&Object.keys(t).length<1}},function(t,e){t.exports=e.default=function(t){return function(e,i){var n={};for(var s in e){var o={configurable:!1,enumerable:i},r=e[s];"function"==typeof r?o.get=r:(o.value=r,o.writable=!1),n[s]=o}Object.defineProperties(t,n)}}},function(t){t.exports=JSON.parse('{"name":"matrix-multiplication","description":"implements row by column multiplication","version":"0.5.2","homepage":"http://g14n.info/matrix-multiplication","author":{"name":"Gianluca Casati","url":"http://g14n.info"},"license":"MIT","main":"matrix-multiplication.js","scripts":{"check-deps":"npm outdated","lint":"standa","postversion":"git push origin v${npm_package_version}; npm publish; git push origin master","test":"NODE_PATH=. tape test.js"},"repository":{"type":"git","url":"git://github.com/fibo/matrix-multiplication.git"},"keywords":["algebra"],"bugs":{"url":"https://github.com/fibo/matrix-multiplication/issues"},"pre-commit":["lint","test","check-deps"],"devDependencies":{"pre-commit":"^1.2.2","standa":"^1.0.2","tape":"^4.8.0"},"dependencies":{"not-defined":"^2.0.1","static-props":"^1.1.1"}}')},function(t,e,i){"use strict";i.r(e);class n extends class{update(t,e){}isOnScreen(){return!0}render(){}}{constructor(t,e=null,i=null){super(),this.id=t,this.canvas=document.getElementById(t),null==e&&(e=this.canvas.width),null==i&&(i=this.canvas.height),this.context=this.canvas.getContext("2d"),this.width=e,this.height=i}isOnScreen(){return function(t){const e=t.getBoundingClientRect();return e.bottom>=0&&e.top<=(window.innerHeight||document.documentElement.clientHeight)&&e.right>=0&&e.left<=(window.innerWidth||document.documentElement.clientWidth)}(this.canvas)}getScrollPosition(){return function(t){const e=t.getBoundingClientRect();return(e.top+e.bottom)/2/(window.innerHeight||document.documentElement.clientHeight)}(this.canvas)}clear(){this.context.resetTransform(),this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}}i(1);function s(t,e,i){return(e-t)*i+t}const o="#4657d7",r="#57a7cc",h="#e91e63";class a extends n{constructor(t,e,i){super(t,e,i),this.points=[],this.pathEndIndex=0,this.curUndoIndex=0,this.undoIndexes=[0],this.drawing=!1,this.onDrawingStart=[],this.onDrawingEnd=[],this.canvas.addEventListener("mousedown",()=>this.startDrawing()),this.canvas.addEventListener("touchstart",()=>this.startDrawing()),document.addEventListener("mouseup",()=>this.stopDrawing()),document.addEventListener("touchend",()=>this.stopDrawing()),this.canvas.addEventListener("touchmove",t=>t.preventDefault(),{passive:!1}),document.addEventListener("keydown",t=>this.checkKeys(t))}get path(){return this.points.slice(0,this.pathEndIndex)}setPoints(t){this.points=t,this.stopDrawing()}checkKeys(t){switch(t.key.toLowerCase()){case"z":this.undo();break;case"y":this.redo();break;case"p":console.log(this.path)}}startDrawing(){this.drawing=!0,this.points=this.path,this.undoIndexes=this.undoIndexes.slice(0,this.curUndoIndex+1),this.onDrawingStart.forEach(t=>t())}stopDrawing(){this.drawing&&(this.drawing=!1,this.curUndoIndex++,this.undoIndexes.push(this.points.length),this.pathEndIndex=this.undoIndexes[this.curUndoIndex],this.onDrawingEnd.forEach(t=>t()))}undo(){let t=this.curUndoIndex-1;t<0&&(t=0),t!=this.curUndoIndex&&(this.curUndoIndex=t,this.pathEndIndex=this.undoIndexes[this.curUndoIndex],this.onDrawingEnd.forEach(t=>t()))}redo(){let t=this.curUndoIndex+1;t>this.undoIndexes.length-1&&(t=this.undoIndexes.length-1),t!=this.curUndoIndex&&(this.curUndoIndex=t,this.pathEndIndex=this.undoIndexes[this.curUndoIndex],this.onDrawingEnd.forEach(t=>t()))}update(t,e){if(!e||!this.drawing)return;const i=this.canvas.getBoundingClientRect(),n=500/(i.right-i.left-2),s={x:n*(e.x-i.x),y:n*(e.y-i.y)};if(0==this.points.length)this.points.push(s),this.pathEndIndex=this.points.length;else{const t=this.points[this.points.length-1],e=s.x-t.x,i=s.y-t.y;e*e+i*i>9&&(this.points.push(s),this.pathEndIndex=this.points.length)}}render(){this.clear(),this.drawPoints(this.path)}drawPoints(t){this.context.beginPath(),this.context.strokeStyle=h,this.context.lineWidth=2;for(let e=0;e<t.length;e++)0==e?this.context.moveTo(t[e].x,t[e].y):this.context.lineTo(t[e].x,t[e].y);this.context.closePath(),this.context.stroke()}}var u=i(0),c=i.n(u);class l extends n{constructor(t,e,i){super(t,e,i),this.animate=!0,this.fourierData=[],this.fourierPath=[],this.numPoints=0,this.pathAmt=1,this.animatePathAmt=!0,this.animAmt=0,this.niceAnimAmt=0,this.period=5,this.fourierAmt=1,this.pathDirty=!1}setPath(t,e=-1,i=.01){e<0&&(e=t.length),this.numPoints=e,this.animAmt=0,this.niceAnimAmt=0,this.fourierPath=[],this.fourierData=function(t){if(0==t.length)return[];const e=t.length/2,i=new c.a(e),n=i.createComplexArray();i.transform(n,t);const s=[];for(let t=0;t<e;t++){const i=t%2==0?t/2:e-(t+1)/2,o=n[2*i],r=n[2*i+1],h=(i+e/2)%e-e/2;s.push({freq:h,amplitude:Math.sqrt(o*o+r*r)/e,phase:Math.atan2(r,o)})}return s}(function(t,e){if(0==t.length)return[];let i=[];for(let n=0;n<e;n++){let o=t.length*(n/e),r=Math.floor(o),h=(r+1)%t.length,a=o-r;i.push(s(t[r].x,t[h].x,a),s(t[r].y,t[h].y,a))}return i}(t,this.numPoints)).filter(t=>t.amplitude>i),this.fourierData.sort((t,e)=>e.amplitude-t.amplitude),console.log(this.fourierData.length+"/"+e)}setFourierAmt(t){this.fourierAmt=t,this.pathDirty=!0}recalculatePath(){for(let t=0;t<this.numPoints;t++)this.niceAnimAmt+=1/this.numPoints,this.addToPath();this.niceAnimAmt-=1}update(t,e){if(this.pathDirty&&(this.recalculatePath(),this.pathDirty=!1),this.animate){for(this.animAmt+=t/this.period%1;this.animAmt>1;)this.animAmt--,this.niceAnimAmt--;if(this.animatePathAmt){const t=.1;let e=0;this.getScrollPosition()<.8&&(e=1),this.pathAmt+=t*(e-this.pathAmt),this.pathAmt>=.99&&(this.pathAmt=1)}for(let t=0;t<20&&!(this.niceAnimAmt>=this.animAmt);t++)this.niceAnimAmt+=1/this.numPoints,this.addToPath()}}addToPath(){if(0==this.fourierData.length)return;let t=0,e=0;const i=Math.round(s(2,this.fourierData.length,this.fourierAmt));for(let n=0;n<i;n++){const i=this.fourierData[n].amplitude,s=2*Math.PI*this.fourierData[n].freq*this.niceAnimAmt+this.fourierData[n].phase;t+=i*Math.cos(s),e+=i*Math.sin(s)}for(this.fourierPath.push({x:t,y:e});this.fourierPath.length>this.numPoints*this.pathAmt&&this.fourierPath.length>0;)this.fourierPath.shift()}render(){this.clear(),this.renderPath(this.fourierPath),this.renderCircles()}renderPath(t){for(let e=0;e<t.length-1;e++)this.context.beginPath(),this.context.strokeStyle=o,this.context.lineWidth=2,this.context.moveTo(t[e].x,t[e].y),this.context.lineTo(t[e+1].x,t[e+1].y),this.context.stroke()}renderCircles(){if(0==this.fourierData.length)return;let t=0,e=0;const i=Math.round(s(2,this.fourierData.length,this.fourierAmt));for(let n=0;n<i;n++){const i=this.fourierData[n].amplitude,s=2*Math.PI*this.fourierData[n].freq*this.animAmt+this.fourierData[n].phase;t+=i*Math.cos(s),e+=i*Math.sin(s),0!=n&&(i<.5||(this.context.beginPath(),this.context.strokeStyle=r,this.context.globalAlpha=.7,this.context.lineWidth=1,this.context.moveTo(t,e),this.context.arc(t,e,i,s-Math.PI,s+Math.PI),this.context.stroke()))}this.context.globalAlpha=1}}class d{constructor(t){this.lastTime=Date.now(),this.mousePosition=null,this.controllers=t.slice(),this.updatingControllers=[],document.addEventListener("mousemove",t=>this.updateMousePosition(t)),document.addEventListener("mousedown",t=>this.updateMousePosition(t)),document.addEventListener("mouseup",t=>this.updateMousePosition(t)),document.addEventListener("touchmove",t=>this.updateTouchPosition(t)),document.addEventListener("touchstart",t=>this.updateTouchPosition(t)),document.addEventListener("touchend",t=>this.updateTouchPosition(t)),window.addEventListener("resize",t=>this.onResize(t))}start(){window.requestAnimationFrame(()=>this.everyFrame())}onResize(t){this.controllers.forEach(t=>{"function"==typeof t.onResize&&t.onResize()})}everyFrame(){this.update(),this.render(),requestAnimationFrame(()=>this.everyFrame())}update(){let t=Date.now(),e=(t-this.lastTime)/1e3;this.updatingControllers=[],this.controllers.forEach(t=>{t.isOnScreen()&&(t.update(e,this.mousePosition),this.updatingControllers.push(t))}),this.lastTime=t;const i=document.getElementById("debug-content");i&&(i.innerHTML=this.updatingControllers.map(t=>t.id).join("<br>")+"<br>")}render(){this.controllers.forEach(t=>{t.isOnScreen()&&t.render()})}updateMousePosition(t){this.mousePosition={x:t.clientX,y:t.clientY}}updateTouchPosition(t){t.touches.length>0&&(this.mousePosition={x:t.touches[0].clientX,y:t.touches[0].clientY})}}let f=null,p=[];function m(t){return null!=document.getElementById(t)}!function(){let t;if(m("draw-zone")&&(t=new a("draw-zone"),p.push(t)),m("draw-zone-undo-button")){const e=document.getElementById("draw-zone-undo-button");t&&e.addEventListener("click",()=>t.undo())}if(m("circle-zone")){let e=new l("circle-zone"),i=[{x:0,y:300},{x:800,y:300}];e.setPath(i,1024),t&&(t.setPoints(i),t.onDrawingStart.push(()=>e.setPath([])),t.onDrawingEnd.push(()=>e.setPath(t.path,1024))),p.push(e)}f=new d(p),f.start()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,